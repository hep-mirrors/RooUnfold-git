namespace RooUnfolding {
  void reset(RooAbsReal* r){
    // TODO
  }
  int findBin(const RooAbsReal* h, double x, RooUnfolding::Dimension d){
    // TOOD
    return 0;
  }
  double min(const RooAbsReal* hist, RooUnfolding::Dimension d){
    return getAxis(hist,d)->GetXmin();
  }
  double max(const RooAbsReal* hist, RooUnfolding::Dimension d){
    return getAxis(hist,d)->GetXmax();
  }
  int sumW2N(const RooAbsReal* hist){
    return 0;
  }
  void add(RooAbsReal* hista, RooAbsReal* histb){
    // TODO
  }  
  void projectY(RooAbsReal* _res, RooAbsReal* _tru, bool overflow){
    // TODO
  } 
  void projectX(RooAbsReal* _res, RooAbsReal* _mes, bool overflow){
    // TODO
  }  
  void subtractProjectX(RooAbsReal* _res, RooAbsReal* _mes, RooAbsReal* _fak, bool overflow){
    // TODO
  }
  int fill(RooAbsReal* hist, double x, double w){
    return 0;
  }
  int fill(RooAbsReal* hist, double x, double y, double w){
    return 0;
  }  
  int fill(RooAbsReal* hist, double x, double y, double z, double w){
    return 0;
  }  
  RooAbsReal* copy(const RooAbsReal* r, bool reset, const char* name = 0, const char* title = 0){
    RooAbsReal* retval = (RooAbsReal*)(r->clone());
    if(name) retval->SetName(name);
    if(title) retval->SetTitle(title);
    return retval;
  }
  int entries(const RooAbsReal* hist){
    // TODO
    return 0;
  }
  int dim(const RooAbsReal* hist){
    // TODO
    return 0;
  }
  int nBins(const RooAbsReal* hist){
    // TODO
    return 0;
  }
  int nBins(const RooAbsReal* hist, RooUnfolding::Dimension d){
    // TODO
    return 0;
  }
  double binCenter(const RooAbsReal*h, int i, RooUnfolding::Dimension d){
    // TODO
    return 0;
  }
  double binWidth(const RooAbsReal*h, int i, RooUnfolding::Dimension d){
    // TODO
    return 0;
  }
  double binHighEdge(const RooAbsReal*h, int i, RooUnfolding::Dimension d){
    // TODO
    return 0;
  }
  double binLowEdge(const RooAbsReal*h, int i, RooUnfolding::Dimension d){
    // TODO
    return 0;
  }
  void binXYZ(const RooAbsReal* tru, int i, int& jx, int& jy, int& jz){
    // TODO
  }
  double binError(const RooAbsReal* h, Int_t i, Bool_t overflow)
  {
    // Bin error   by vector index
    // TODO
    return 0;
  }  
  double binContent (const RooAbsReal* h, Int_t i, Bool_t overflow){
    // TODO
    return 0;
  }
  void setBinContent (RooAbsReal* h, int i, double val, Bool_t overflow){
    // TODO
  }
  void setBinContent (RooAbsReal* h, int i, int j, double val, Bool_t overflow){
    // TODO
  }
  template<class Hist2D> Hist2D* createHist(const char* name, const char* title, int nbinsx, double xmin, double xmax, const char* xname, int nbinsy, double ymin, double ymax, const char* yname);  
  RooAbsReal* createHist<RooAbsReal>(const char* name, const char* title, int nbinsx, double xmin, double xmax, const char* xname, int nbinsy, double ymin, double ymax, const char* yname){
    RooRealVar* x = new RooRealVar(xname,xname,nbinsx,xmin,xmax);
    RooRealVar* y = new RooRealVar(yname,yname,nbinsy,ymin,ymax);
    RooArgSet vars(*x,*y);
    RooDataHist* hist = new RooDataHist (name,title,vars);
    return new RooHistFunc(name,title,vars,vars,*hist);
  }
  template<> RooAbsReal* createHist<RooAbsReal>(const char* name, const char* title, int nbinsx, double xmin, double xmax, const char* xname){
    RooRealVar* x = new RooRealVar(xname,xname,nbinsx,xmin,xmax);
    RooArgSet vars(*x);    
    RooDataHist* hist = new RooDataHist (name,title,vars);
    return new RooHistFunc(name,title,vars,vars,*hist);
  }
}  

  


